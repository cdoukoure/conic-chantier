name: CI & DevSecOps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  laravel-tests:
    name: ✅ Tests Laravel
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel1234
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🎲 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ./src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: ⚙️ Installer PHP avec extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0.30
          extensions: pdo, pdo_mysql, mbstring, exif, pcntl, zip, gd, xml
          ini-values: memory_limit=512M
          coverage: none

      - name: 🔒 Préparer les répertoires système
        working-directory: ./src
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/framework/{sessions,views,cache}
          chmod -R 777 storage bootstrap/cache
          echo "Permissions réparées"

      - name: 📦 Installer les dépendances
        working-directory: ./src
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: 🔧 Configurer l'environnement
        working-directory: ./src
        run: |
          cp .env.example .env
          php artisan key:generate
          # Configuration spécifique MySQL
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel" >> .env
          echo "DB_USERNAME=laravel" >> .env
          echo "DB_PASSWORD=laravel1234" >> .env
          # Pour le debug
          cat .env | grep DB_

      - name: ⏳ Attendre que MySQL soit prêt
        run: |
          for i in {1..10}; do
            if mysql --host=127.0.0.1 --user=root --password=root -e "SELECT 1" >/dev/null 2>&1; then
              echo "MySQL est prêt"
              exit 0
            fi
            echo "Tentative $i: MySQL n'est pas encore prêt, attente de 5 secondes..."
            sleep 5
          done
          echo "MySQL n'a pas démarré à temps"
          exit 1

      - name: 🗄️ Créer la base de données (si nécessaire)
        run: |
          mysql --host=127.0.0.1 --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS laravel;"
          mysql --host=127.0.0.1 --user=root --password=root -e "GRANT ALL PRIVILEGES ON laravel.* TO 'laravel'@'%'; FLUSH PRIVILEGES;"

      - name: 🧪 Tester la connexion à la base
        run: |
          mysql --host=127.0.0.1 --user=laravel --password=laravel1234 -e "SHOW DATABASES;"

      - name: 🗄️ Lancer les migrations
        working-directory: ./src
        run: php artisan migrate --force

      - name: ✅ Lancer les tests
        working-directory: ./src
        run: php artisan test

  php-lint:
    name: 🧠 Analyse statique PHP (phpstan)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 🎲 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ./src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: ⚙️ Installer PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0.30

      - name: 📦 Installer les dépendances
        working-directory: ./src
        run: composer install --no-progress

      - name: 🧠 Analyse avec PHPStan
        working-directory: ./src
        run: ./vendor/bin/phpstan analyse --memory-limit=512M

  docker-lint:
    name: 🔍 Lint Dockerfile (hadolint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/php/Dockerfile

  docker-scan:
    name: 🔐 Scan Docker image (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 🐳 Build de l'image Docker
        run: docker build -t my-app-secure -f docker/php/Dockerfile .
      - name: 🔐 Scan de sécurité Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-app-secure
          format: table
          exit-code: 1 # Échoue en cas de vulnérabilités
          severity: CRITICAL,HIGH
