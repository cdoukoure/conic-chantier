name: CI & DevSecOps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  laravel-tests:
    name: ✅ Tests Laravel
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel1234
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🎲 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ./src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: ⚙️ Installer PHP avec extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0.30
          extensions: pdo, pdo_mysql, mbstring, exif, pcntl, zip, gd, xml
          coverage: none

      - name: 📦 Installer les dépendances
        working-directory: ./src
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: 🔧 Configurer l'environnement
        working-directory: ./src
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: 🗄️ Lancer les migrations
        working-directory: ./src
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel
          DB_USERNAME: laravel
          DB_PASSWORD: laravel1234
        run: php artisan migrate --force

      - name: ✅ Lancer les tests
        working-directory: ./src
        run: php artisan test

  php-lint:
    name: 🧠 Analyse statique PHP (phpstan)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 🎲 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ./src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: ⚙️ Installer PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0.30
      
      - name: 📦 Installer les dépendances
        working-directory: ./src
        run: composer install --no-progress

      - name: 🧠 Analyse avec PHPStan
        working-directory: ./src
        run: ./vendor/bin/phpstan analyse --memory-limit=512M

  docker-lint:
    name: 🔍 Lint Dockerfile (hadolint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/php/Dockerfile

  docker-scan:
    name: 🔐 Scan Docker image (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 🐳 Build de l'image Docker
        run: docker build -t my-app-secure -f docker/php/Dockerfile .
      - name: 🔐 Scan de sécurité Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-app-secure
          format: table
          exit-code: 1  # Échoue en cas de vulnérabilités
          severity: CRITICAL,HIGH